// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alioygur/imgbucket/providers (interfaces: Repository)

// Package mock_providers is a generated GoMock package.
package mock_providers

import (
	imgbucket "github.com/alioygur/imgbucket"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddBucket mocks base method
func (m *MockRepository) AddBucket(arg0 *imgbucket.Bucket) error {
	ret := m.ctrl.Call(m, "AddBucket", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBucket indicates an expected call of AddBucket
func (mr *MockRepositoryMockRecorder) AddBucket(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBucket", reflect.TypeOf((*MockRepository)(nil).AddBucket), arg0)
}

// AddImage mocks base method
func (m *MockRepository) AddImage(arg0 *imgbucket.Image) error {
	ret := m.ctrl.Call(m, "AddImage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddImage indicates an expected call of AddImage
func (mr *MockRepositoryMockRecorder) AddImage(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddImage", reflect.TypeOf((*MockRepository)(nil).AddImage), arg0)
}

// BucketByUserIDAndName mocks base method
func (m *MockRepository) BucketByUserIDAndName(arg0 int64, arg1 string) (*imgbucket.Bucket, error) {
	ret := m.ctrl.Call(m, "BucketByUserIDAndName", arg0, arg1)
	ret0, _ := ret[0].(*imgbucket.Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BucketByUserIDAndName indicates an expected call of BucketByUserIDAndName
func (mr *MockRepositoryMockRecorder) BucketByUserIDAndName(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BucketByUserIDAndName", reflect.TypeOf((*MockRepository)(nil).BucketByUserIDAndName), arg0, arg1)
}

// DefaultBucketByUserID mocks base method
func (m *MockRepository) DefaultBucketByUserID(arg0 int64) (*imgbucket.Bucket, error) {
	ret := m.ctrl.Call(m, "DefaultBucketByUserID", arg0)
	ret0, _ := ret[0].(*imgbucket.Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DefaultBucketByUserID indicates an expected call of DefaultBucketByUserID
func (mr *MockRepositoryMockRecorder) DefaultBucketByUserID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultBucketByUserID", reflect.TypeOf((*MockRepository)(nil).DefaultBucketByUserID), arg0)
}

// ImageExistsByName mocks base method
func (m *MockRepository) ImageExistsByName(arg0 string) (bool, error) {
	ret := m.ctrl.Call(m, "ImageExistsByName", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageExistsByName indicates an expected call of ImageExistsByName
func (mr *MockRepositoryMockRecorder) ImageExistsByName(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageExistsByName", reflect.TypeOf((*MockRepository)(nil).ImageExistsByName), arg0)
}

// ImageExistsByUserIDAndBucketIDAndName mocks base method
func (m *MockRepository) ImageExistsByUserIDAndBucketIDAndName(arg0, arg1 int64, arg2 string) (bool, error) {
	ret := m.ctrl.Call(m, "ImageExistsByUserIDAndBucketIDAndName", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageExistsByUserIDAndBucketIDAndName indicates an expected call of ImageExistsByUserIDAndBucketIDAndName
func (mr *MockRepositoryMockRecorder) ImageExistsByUserIDAndBucketIDAndName(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageExistsByUserIDAndBucketIDAndName", reflect.TypeOf((*MockRepository)(nil).ImageExistsByUserIDAndBucketIDAndName), arg0, arg1, arg2)
}

// IsNotFoundErr mocks base method
func (m *MockRepository) IsNotFoundErr(arg0 error) bool {
	ret := m.ctrl.Call(m, "IsNotFoundErr", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNotFoundErr indicates an expected call of IsNotFoundErr
func (mr *MockRepositoryMockRecorder) IsNotFoundErr(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNotFoundErr", reflect.TypeOf((*MockRepository)(nil).IsNotFoundErr), arg0)
}
